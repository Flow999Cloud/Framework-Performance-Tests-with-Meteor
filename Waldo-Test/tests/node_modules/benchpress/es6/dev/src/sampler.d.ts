import { Binding } from 'angular2/di';
import { Metric } from './metric';
import { Validator } from './validator';
import { Reporter } from './reporter';
import { WebDriverAdapter } from './web_driver_adapter';
/**
 * The Sampler owns the sample loop:
 * 1. calls the prepare/execute callbacks,
 * 2. gets data from the metric
 * 3. asks the validator for a valid sample
 * 4. reports the new data to the reporter
 * 5. loop until there is a valid sample
 */
export declare class Sampler {
    static BINDINGS: List<Binding>;
    _driver: WebDriverAdapter;
    _metric: Metric;
    _reporter: Reporter;
    _validator: Validator;
    _prepare: Function;
    _execute: Function;
    _now: Function;
    constructor({driver, metric, reporter, validator, prepare, execute, now}?: {
        driver?: WebDriverAdapter;
        metric?: Metric;
        reporter?: Reporter;
        validator?: Validator;
        prepare?: Function;
        execute?: Function;
        now?: Function;
    });
    sample(): Promise<SampleState>;
    _iterate(lastState: any): any;
    _report(state: SampleState, metricValues: StringMap<string, any>): Promise<SampleState>;
}
export declare class SampleState {
    completeSample: List<any>;
    validSample: List<any>;
    constructor(completeSample: List<any>, validSample: List<any>);
}
