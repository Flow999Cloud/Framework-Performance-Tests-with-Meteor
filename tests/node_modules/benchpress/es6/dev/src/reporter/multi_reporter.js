import { bind, Injector, OpaqueToken } from 'angular2/di';
import { ListWrapper } from 'angular2/src/facade/collection';
import { PromiseWrapper } from 'angular2/src/facade/async';
import { Reporter } from '../reporter';
export class MultiReporter extends Reporter {
    constructor(reporters) {
        super();
        this._reporters = reporters;
    }
    static createBindings(childTokens) {
        return [
            bind(_CHILDREN)
                .toFactory((injector) => ListWrapper.map(childTokens, (token) => injector.get(token)), [Injector]),
            bind(MultiReporter).toFactory(children => new MultiReporter(children), [_CHILDREN])
        ];
    }
    reportMeasureValues(values) {
        return PromiseWrapper.all(ListWrapper.map(this._reporters, (reporter) => reporter.reportMeasureValues(values)));
    }
    reportSample(completeSample, validSample) {
        return PromiseWrapper.all(ListWrapper.map(this._reporters, (reporter) => reporter.reportSample(completeSample, validSample)));
    }
}
var _CHILDREN = new OpaqueToken('MultiReporter.children');
//# sourceMappingURL=multi_reporter.js.map