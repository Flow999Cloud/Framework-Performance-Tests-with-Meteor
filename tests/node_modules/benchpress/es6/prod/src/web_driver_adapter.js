var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { bind } from 'angular2/di';
import { BaseException, ABSTRACT } from 'angular2/src/facade/lang';
/**
 * A WebDriverAdapter bridges API differences between different WebDriver clients,
 * e.g. JS vs Dart Async vs Dart Sync webdriver.
 * Needs one implementation for every supported WebDriver client.
 */
export let WebDriverAdapter = class {
    static bindTo(delegateToken) {
        return [bind(WebDriverAdapter).toFactory((delegate) => delegate, [delegateToken])];
    }
    waitFor(callback) { throw new BaseException('NYI'); }
    executeScript(script) { throw new BaseException('NYI'); }
    executeAsyncScript(script) { throw new BaseException('NYI'); }
    capabilities() { throw new BaseException('NYI'); }
    logs(type) { throw new BaseException('NYI'); }
};
WebDriverAdapter = __decorate([
    ABSTRACT(), 
    __metadata('design:paramtypes', [])
], WebDriverAdapter);
//# sourceMappingURL=web_driver_adapter.js.map