import { Binding, OpaqueToken } from 'angular2/di';
import { WebDriverExtension, PerfLogFeatures } from '../web_driver_extension';
import { Metric } from '../metric';
/**
 * A metric that reads out the performance log
 */
export declare class PerflogMetric extends Metric {
    private _driverExtension;
    private _setTimeout;
    private _microMetrics;
    private _forceGc;
    private _captureFrames;
    static BINDINGS: List<Binding>;
    static SET_TIMEOUT: OpaqueToken;
    private _remainingEvents;
    private _measureCount;
    _perfLogFeatures: PerfLogFeatures;
    /**
     * @param driverExtension
     * @param setTimeout
     * @param microMetrics Name and description of metrics provided via console.time / console.timeEnd
     **/
    constructor(_driverExtension: WebDriverExtension, _setTimeout: Function, _microMetrics: StringMap<string, any>, _forceGc: boolean, _captureFrames: boolean);
    describe(): StringMap<string, any>;
    beginMeasure(): Promise<any>;
    endMeasure(restart: boolean): Promise<StringMap<string, any>>;
    _endPlainMeasureAndMeasureForceGc(restartMeasure: boolean): Promise<StringMap<string, any>>;
    _beginMeasure(): Promise<any>;
    _endMeasure(restart: boolean): Promise<StringMap<string, any>>;
    _readUntilEndMark(markName: string, loopCount?: int, startEvent?: any): Promise<StringMap<string, any>>;
    _addEvents(events: any): void;
    _aggregateEvents(events: List<StringMap<string, any>>, markName: any): StringMap<string, any>;
    _addFrameMetrics(result: StringMap<string, any>, frameTimes: any[]): void;
    _markName(index: any): string;
}
